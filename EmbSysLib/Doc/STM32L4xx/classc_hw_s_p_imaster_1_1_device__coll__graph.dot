digraph "cHwSPImaster::Device"
{
  edge [fontname="Sans",fontsize="8",labelfontname="Sans",labelfontsize="8"];
  node [fontname="Sans",fontsize="8",shape=record];
  Node1 [label="{cHwSPImaster::Device\n||+ Device()\l+ start()\l+ stop()\l+ transceive()\l+ transceive()\l+ read()\l+ read()\l+ write()\l+ write()\l+ write()\l+ writeExt()\l+ writeExt()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="8",style="solid",label=" +CS" ,arrowhead="odiamond",fontname="Sans"];
  Node2 [label="{cHwPort::Pin\n||+ Pin()\l+ Pin()\l+ setMode()\l+ set()\l+ set()\l+ clr()\l+ get()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_hw_port_1_1_pin.html",tooltip="Handle a single pin of a GPIO port. "];
  Node3 -> Node1 [color="grey25",fontsize="8",style="solid",label=" +spi" ,arrowhead="odiamond",fontname="Sans"];
  Node3 [label="{cHwSPImaster\n||+ transceiveByte()\l+ transceiveByteExt()\l# cHwSPImaster()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_hw_s_p_imaster.html",tooltip="Abstract class supporting the SPI hardware in master mode. "];
}

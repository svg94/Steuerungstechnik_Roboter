digraph "cISC_USBdevice"
{
  edge [fontname="Sans",fontsize="8",labelfontname="Sans",labelfontsize="8"];
  node [fontname="Sans",fontsize="8",shape=record];
  Node1 [label="{cISC_USBdevice\n||+ cISC_USBdevice()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="8",style="solid",arrowtail="onormal",fontname="Sans"];
  Node2 [label="{cISC\n||+ update()\l+ writeStream()\l# cISC()\l# write()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_i_s_c.html",tooltip="ISC transport base class. "];
  Node3 -> Node2 [color="grey25",fontsize="8",style="solid",label=" +crc" ,arrowhead="odiamond",fontname="Sans"];
  Node3 [label="{cCRC\n||+ cCRC()\l+ ~cCRC()\l+ operator()()\l+ operator()()\l+ get()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_c_r_c.html",tooltip="16 bit cyclic redundancy check (CRC) calculation. "];
  Node4 -> Node2 [color="grey25",fontsize="8",style="solid",label=" +list" ,arrowhead="odiamond",fontname="Sans"];
  Node4 [label="{cList\n||+ cList()\l+ add()\l+ updateAll()\l+ getFirst()\l+ operator[]()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_list.html",tooltip="Base class for single linked lists. "];
  Node5 -> Node1 [dir="back",color="midnightblue",fontsize="8",style="solid",arrowtail="onormal",fontname="Sans"];
  Node5 [label="{cUSBinterfClassVSC\l\< cISC::DATA, cISC::\lDATA \>\n||+ cUSBinterfClassVSC()\l+ onTransmit()\l+ onReceive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_u_s_binterf_class_v_s_c.html"];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="8",style="solid",arrowtail="onormal",fontname="Sans"];
  Node6 [label="{cHwUSBinterf\n|# configId\l# interfId\l|+ cHwUSBinterf()\l# transmit()\l# request()\l# requestCtrlIN()\l# requestCtrlOUT()\l# receive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_hw_u_s_binterf.html"];
  Node7 -> Node6 [color="grey25",fontsize="8",style="solid",label=" #usb" ,arrowhead="odiamond",fontname="Sans"];
  Node7 [label="{cHwUSB\n||+ start()\l# cHwUSB()\l# eventHandler()\l# reset()\l# configure()\l# setAddress()\l# configEP()\l# setStallEP()\l# clrStallEP()\l# readEP()\l# writeEP()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classc_hw_u_s_b.html",tooltip="Abstract interface to USB hardware. "];
  Node8 -> Node6 [color="grey25",fontsize="8",style="solid",label=" #epIN\n#epOUT" ,arrowhead="odiamond",fontname="Sans"];
  Node8 [label="{cHwUSBendpoint\n||+ writeData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_hw_u_s_bendpoint.html",tooltip="Endpoint. "];
  Node9 -> Node5 [dir="back",color="orange",fontsize="8",style="solid",label=" \< cISC::DATA, cISC\l::DATA \>" ,fontname="Sans"];
  Node9 [label="{cUSBinterfClassVSC\l\< IN_T, OUT_T \>\n||+ cUSBinterfClassVSC()\l+ onTransmit()\l+ onReceive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classc_u_s_binterf_class_v_s_c.html",tooltip="Template class supporting USB communication as vendor specific class (VSC) "];
  Node6 -> Node9 [dir="back",color="midnightblue",fontsize="8",style="solid",arrowtail="onormal",fontname="Sans"];
}
